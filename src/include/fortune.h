#ifndef VORONOI_FORTUNE_H
#define VORONOI_FORTUNE_H

/* FROM: CMSC 754: Lecture 11, Voronoi Diagrams and Fortuneâ€™s Algorithm, Dave Mount, Spring 2020
 *
 * Site event:  Sweep line passes over a new site.
 *                - The new site has a degenerate arc (vertical line). Assume
 *                  it does not fall immeadetly below an existing vertex.
 *                - The existing arch is then split into three:
 *                  < ... pi ... >    ->    < ... pi pj pi ... >
 *                - Note that these events are known in advance!
 *
 * Vertex event:  Generated by adjacent arcs, once one "disappears".
 *                  - Consider pi, pj, pk sucht that: 
 *                    < ... pj pi pj pk ... >  .
 *                    There is a circumcircle containint these 3 points.
 *                  - If the circumcircle does not contain any other site 
 *                    inside (bellow the sweep-line), no future point will 
 *                    block the creation of the vertex.
 *                  - The vertex is created when the sweep-liine reaches the
 *                    lowest point of the circumcircle.
 *                  - The bisectors (pi, pj) and (pj, pk) have met each other.
 *                    Now a new bisector (pi, pk) is created.
 *                    < .. pj pi pj pk .. >    ->    < .. pj pi pk .. >
 *
*/

typedef struct seed_T {
  double x;
  double y;
} seed_T;


seed_T *random_seeds(double size, int N);


// The beachline struct consists of the sorted sequence of sites whose arcs 
// form the current beachline. It is updated with the events.
// Linked list of arcs, where the arcs are simply the seeds.
typedef struct beachline_T {
  seed_T arc;
  seed_T *arc_right;
} beachline_T;


seed_T *find_arc_above(const beachline_T *bline, const seed_T seed);

seed_T *insert_and_split(beachline_T *bline, 
                         const seed_T *exisint_arc, 
                         const seed_T *new_arc);

void delete_arc(beachline_T *bline, const seed_T *arc);



// Event queue:  linked list of events
enum event_type {
    EVENT_SITE,
    EVENT_VERTEX
};

typedef struct event_T {
  enum event_type type;
  struct event_T *next;
  double x;  // Coordinates associated to the event
  double y;
} event_T;

event_T *new_event(enum event_type type, double x, double y);

event_T *initialize_queue(const seed_T *seeds, int N);

void print_queue(const event_T *queue);

void print_event(const event_T *event);


// Voronoi diagram:
/*
typedef struct vor_diagram {

} vor_diagram;
*/


#endif
